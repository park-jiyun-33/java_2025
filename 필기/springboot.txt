■ STEP1. project
    - enc UTF-8
    - project

    연습) boot002 project 만들기 

■ STEP2. setting (properties)
>> before
spring.application.name=boot001
############################################
##           	 boot SETTING           	        ##
############################################
# WebApplication

# Banner  

# DataSource  

# Jpa  

# Logging 

# Thymeleaf 

- dto( lombok )

    연습 boot002 project 만들기
	1) application.properteis 설정
	   context-path=/boot2
	   포트번호 8282
	   application-type=  web로 설정
	2) @Controller  @ResponseBody 설정해서
	localhost:8282/boot2/ex1 접속시 - springboot 출력

	3) @Controller 설정해서
	RequestMapping("/ex2")  -  model 설정 test
	localhost:8282/boot2/ex2 접속시 - model에서 설정한 - ex2 출력


■ STEP3. db
- jpa
	1) application.properties
	2) @Entity - Dto / 테이블 만들기
	3) @Repository - Dao

- ex)
	1) @Entity 이용해서 Member 테이블만들기
	2) @Repository 이용해서 MemberRepository 

■ STEP4. view
1. pom.xml 셋팅확인
	<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-thymeleaf</artifactId>
	</dependency>
	<!--  https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect  -->
	<!--  추가  -->
	<dependency>
	<groupId>nz.net.ultraq.thymeleaf</groupId>
	<artifactId>thymeleaf-layout-dialect</artifactId>
	</dependency>
	<!--  추가  -->

2. application.properties 설정확인
	spring.thymeleaf.cache=false
	spring.thymeleaf.prefix=classpath:/templates/
	spring.thymeleaf.suffix=.html
3. layout
4. 화면설정

■ STEP5. board
>> Query

■ STEP6. security
1. spring security?
1) 애플리케이션의 보안(인증, 인가) 담당
2) filter의 흐름에 따라 처리

2. 인증  vs  인가
1) 인증 - 본인이 맞는지 확인		여권)-본인이 맞는지 인증
2) 인가 - 인증된 사용자가 접근가능	조종석까지 가기(X)

3. spring security 아키텍쳐 (1)
1) 사용자가 로그인폼 로그인시도 (username + password 전달)
2)  UsernamePasswordAuthentication  요청정보 - Authentication 생성 
3)  Authentication 인증처리

10) 인증완료 (사용자정보)  SecurityContextHolder에 담기
   - AuthenticationSuccessHandler 성공!
   - AuthenticationFailureHandler  실패!

3. spring security 아키텍쳐 (2)
4)  Authentication Manager 인증담당
    - UsernamePasswordAuthentication Token 은  Provider를 찾는데 사용
5) AuthenticationProvider  - 로그인정보와 db정보를 비교
6) UserDetailService  - db에 있는 사용자 정보 가져오기


[실습]
1. spring project > pom.xml (security5)
2. localhost:8080/login  로그인창 -> 인증(본인확인)
3. SecurityConfig.java  - 설정
4. Member  	   - @Entity
5. MemberRepository - crud(Dao)
6. MemberService
7. Controller
8. View


1. ERD (Entity Relationship Diagram)

Step1) 정규화?
1. 관계형데이터모델 - 데이터간 관계에 초점을 둔 모델
2. 이상(Anomaly) - 공간낭비
    - 삽입, 갱신, 삭제 이상
3. 정규화? 이상을 제거하는것.

Step2) erd 핵심구성요소
1. 개체(Entity) - 테이블, 개념의 정보단위
2. 속성(Attribute) - 테이블 열, 가장 작은 논리적단위
3. 관계(Relationship) - 외래키

예) emp(deptno)  -  dept(deptno)
- 부서는 많은 사원을 가지고있다.
*JPA
    @ManyToOne	@OneToMany(mappedBy="dept")

Step3) 정규화 1NF - 5NF (NF: Noramal Form)
_________________________________________________________________________
★1NF : 관계(최소형) - 최소한 테이블, [중복]되는 항목이 없어야 함.

QUESTION1)
[BEFORE]
CUSTOMERID   FIRSTNAME   SURNAME   	TELEPHONE NUMBER
-------------------------------------------------------------------------------------------
123      	         ROBERT        INGRAM	   555-861-2025
-------------------------------------------------------------------------------------------
456      	         JANE            WRIGHT      	   555-403-1659
                 		          		   555-776-4100
-------------------------------------------------------------------------------------------
789     	         MARIA         FERNADES   	   555-808-9633
-------------------------------------------------------------------------------------------

[AFTER1]
CUSTOMERID   FIRSTNAME   SURNAME  	 TELEPHONE NUMBER
-------------------------------------------------------------------------------------------
123      	         ROBERT        INGRAM	   555-861-2025
-------------------------------------------------------------------------------------------
456      	         JANE            WRIGHT      	   555-403-1659
-------------------------------------------------------------------------------------------
456      	         JANE            WRIGHT      	   555-776-4100
-------------------------------------------------------------------------------------------
789     	         MARIA         FERNADES   	   555-808-9633
-------------------------------------------------------------------------------------------

[AFTER2]
--- 테이블1)
[NAMEINFO]
CUSTOMERID → FIRSTNAME, SURNAME
ID를 알면         이름정보를 알수있다.

CUSTOMERID   FIRSTNAME   SURNAME   	
-------------------------------------------------
123      	        ROBERT        INGRAM		  
-------------------------------------------------
456      	        JANE            WRIGHT      	  
-------------------------------------------------
789     	        MARIA         FERNADES   	  
-------------------------------------------------

--- 테이블2)
CUSTOMERID	 TELEPHONE NUMBER
-------------------------------------------------
123      	         	 555-861-2025
-------------------------------------------------
456      	             555-403-1659
-------------------------------------------------
456      	           	 555-776-4100
-------------------------------------------------
789     	             555-808-9633
-------------------------------------------------

_________________________________________________________________________
★2NF : 부분함수 종속제거 - 모든속성이 기본키에 완전함수 종속
	~알면   ~를 알수 있다.
	X(결정자) → Y(종속자)
	기본키에 완전함수 종속


1. {STD_ID, 과목} → 성적 
2. {STD_ID} → PROFESSOR
3. {STD_ID} → 학부
4. {PROFESSOR} → 학부

_________________________________________________________________________
★3NF : 이행함수 종속제거   before) x->y->z
			after) x->y/ y->z
          다른후보키에 의존하지 않음
_________________________________________________________________________
BCNF : 모든 결정자 후보키
_________________________________________________________________________
★4NF : 다치종속 
	- 게시판 / 해시태그
	- 교수2  / 교재2
_________________________________________________________________________
★5NF : 조인종속 
	- 중간테이블
	- 다: 다 관계

게시판						해시코드
1. first	 	#good 	#happy	 #Beer		1. good
2. second 	#good	 #Beer			2. happy
3. third	 	#good	 #sed			3. beer
						4. sad

게시판		게시판해시코드		해시코드
1		1	1		1. good
		1	2		2. happy
		1	3		3. beer
2		2	1
		2	3

■ ~로 구성되어 있다.  
[ex001] 하나의 A는 하나의 B로 구성되어 있다.  1:1
[홍길동]┼─────┼[목숨]
[홍길동]┼─────┼[주민증]


[ex002] 하나의 A는 여러개의 B로 구성되어있다.  1:다
학과는 많은 교수를 가질 수 있다.
[학과]┼─────∈[김교수, 나교수, 다교수]


[ex003] 관계설정 (1) 1:1  1:다  다:다 중에 고르기

4-1. 학과와 학생의 관계	1:다	
	학과는 많은 학생을 가질 수 있다.
	학생은 한학과에 소속된다.




4-2. 학과와 교수의 관계
	학과는 많은 교수를 가질 수 있다.
	교수는 한학과에 소속된다.

4-3. 교수와 개설과목 관계
	교수는 많은 과목을 가르칠 수 있다.
	과목은 강의하는 교수 한명이 지정 된다.

4-4. 과목과 학생의 관계
	과목은 수강하는 많은 학생을 가진다.
	학생은 많은 과목을 수강할수있다.






4-1. 학과와 학생의 관계	1:다	학과는 많은 학생을 가질 수 있다.
<<학과(Department)>>┼ ─ ─ ─ ─ ─ ─ ∈<<학생(Student)>>
학과코드(dept_id: ★PK)			학번(std_id: ★PK)
학과명(dept_name)				성명(std_name)
					키(height)
					학과코드(dept_id: ☆FK)
- 학과와 학생은 1:다관계
- 부모테이블 학과 / 자식테이블 학생
- 점선


4-2. 학과와 교수의 관계	1:다	학과는 많은 교수를 가질 수 있다.
<<학과(Department)>>┼ ─ ─ ─ ─ ─ ─ ∈<<교수(Professor)>>
학과코드(dept_id: ★PK)			교수코드(prof_id: ★PK)
학과명(dept_name)				교수명(prof_name)
					학과코드(dept_id: ☆FK)
- 학과와 교수은 1:다관계
- 부모테이블 학과 / 자식테이블 교수
- 점선


4-3. 교수와 개설과목 관계	1:다	교수는 많은 과목을 가르칠 수 있다.

<<교수(Professor)>>┼ ─ ─ ─ ─ ─ ─ ∈<<개설과목(Course)>>
교수코드(prof_id: ★PK)			과목코드(course_id: ★PK)
교수명(prof_name)				과목명(course_name)
학과코드(dept_id: ☆FK)			시작일(start_date)
					종료일(end_date)
					교수코드(prof_id: ☆FK)
- 교수와 개설과목  1:다관계
- 부모테이블 교수 / 자식테이블 개설과목
- 점선


4-4. 과목과 학생의 관계 다:다
	과목은 수강하는 많은 학생을 가진다.
	학생은 많은 과목을 수강할 수 있다.

<<개설과목(Course)>>┼──────∈<<StudentCourse>>∋──────┼<<학생(Student)>>
과목코드(course_id: ★PK)		   학번(std_id: ★PK)		   학번(std_id: ★PK)
과목명(course_name)		   과목코드(course_id: ★PK)		   성명(std_name)
시작일(start_date) 							   키(height)
종료일(end_date)							   학과코드(dept_id: ☆FK)
교수코드(prof_id: ☆FK)

- 개설과목과 학생의  다:다관계
- 부모테이블 (개설과목, 학생) / 자식테이블 (StudentCourse)
- 실선

1. java				1	2			1 one
2. spring				1	3			2 two
3. mysql				2	1			3 mysql
				2	3




[ex004] 관계설정 (2) 관계도

<<테이블>>
    학생(Student)
        학번(std_id), 성명(std_name), 키(height), 학과코드(dept_id)

    학과(Department)
        학과코드(dept_id), 학과명(dept_name)

    교수(Professor)
        교수코드(prof_id), 교수명(prof_name), 학과코드(dept_id)

    개설과목(Course)
        과목코드(course_id), 과목명(course_name), 교수코드(prof_id),
        시작일(start_date), 종료일(end_date)

    수강(std_Course)
        학번(std_id), 과목코드(course_id)

















